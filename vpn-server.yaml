openapi: 3.0.1
info:
  title: Anode VPN Server
  description: 'VPN server for Anode at [http://anode.co](http://anode.co)'
  termsOfService: 'http://anode.co/terms/'
  contact:
    email: info@anode.co
  version: "0.3"
externalDocs:
  description: Find out more about Anode
  url: 'http://anode.co'
servers:
  - url: 'https://api.anode.co/api/0.3/'
tags:
  - name: Events
    description: 'Client-side loggable events'
    externalDocs:
      description: Find out more
      url: 'http://api.anode.co'
  - name: Coordinator
    description: 'Functionsrelated to this server'
    externalDocs:
      description: Find out more
      url: 'http://api.anode.co'
  - name: Authorization
    description: 'Interacting with the authorization system'
    externalDocs:
      description: Find out more
      url: 'http://api.anode.co'
  - name: Account Management
    description: Create accounts, change passwords, and other account management features
    externalDocs:
      description: Find out more
      url: 'http://api.anode.co'
  - name: Clients
    description: 'Client software'
    externalDocs:
      description: Find out more
      url: 'http://api.anode.co'
  - name: Servers
    description: 'VPN servers'
    externalDocs:
      description: Find out more
      url: 'http://api.anode.co'
paths:
  /coordinator/publickey/:
    post:
      tags:
        - Coordinator
      summary: Get this server's public  key
      operationId: getCoordinatorPublicKey
      responses:
        '200':
          description: OK. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanonicalPublicKeyOutput'
  /vpn/clients/publickeys/:
    post:
      tags:
        - Authorization
      summary: Register a new public key
      operationId: createNewPublicKey
      requestBody:
        description: Returns a public key ID for reference on the server.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublicKeyInput'
        required: true
      responses:
        '201':
          description: Created. A new version has been saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKeyOutput'
        '400':
          description: Invalid input
  /vpn/servers/:
    get:
      tags:
        - Servers
      summary: Client  gets a list of available VPN servers
      operationId: getVpnServerList
      responses:
        '200':
          description: Ok. Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: total number of servers available
                    example: 1
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: https://vpn.anode.co/api/0.2/vpn/servers/?limit=50&offset=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: https://vpn.anode.co/api/0.2/vpn/servers/?limit=50&offset=0
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/VPNServer'
      security:
        - ApiKey: 
            - 'read:vpnList'
    post:
      tags:
        - Servers
      summary: Admin registers new server
      operationId: registerVpnServer
      requestBody:
        description: Admin registers a new VPN
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VPNServer'
        required: true
      responses:
        '201':
          description: Created. Server registered
        '400':
          description: Bad Request. Invalid input
        '403':
          description: Forbidden. User isn't authorized to  register new servers
      security:
        - ApiKey: 
            - 'write:vpnServer'
  /vpn/servers/{serverPublicKey}/:
    get:
      tags:
        - Servers
      summary: Client gets info about a VPN server
      operationId: getVpnServer
      parameters:
        - in: path
          name: serverPublicKey
          schema:
            type: string
            example: lbqr0rzyc2tuysw3w8gfr95u68kujzlq7zht5hyf452u8yshr120.k
          description: VPN server cjdns public key
          required: true
      responses:
        '200':
          description: Ok. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VPNServer'  
      security:
        - ApiKey: 
            - 'read:vpnList'
    delete:
      tags:
        - Servers
      summary: Admin removes a VPN server
      operationId: deleteVpnServer
      parameters:
        - in: path
          name: serverPublicKey
          schema:
            type: string
            example: lbqr0rzyc2tuysw3w8gfr95u68kujzlq7zht5hyf452u8yshr120.k
          description: VPN server cjdns public key
          required: true
      responses:
        '200':
          description: OK. The server is removed from the list
        '400':
          description: Bad Request. Invalid input
        '403':
          description: Forbidden. User isn't authorized to  register new servers
      security:
        - ApiKey: 
            - 'delete:vpnServer'
          
  /vpn/servers/{serverPublicKey}/authorize/:
    post:
      tags:
        - Servers
      summary: Client requests a connection to a VPN server. The client's signature will reveal a public key, which is the one authorized by the VPN server.
      operationId: checkVpnServerConnectionStatus
      parameters:
        - in: path
          name: serverPublicKey
          schema:
            type: string
            example: lbqr0rzyc2tuysw3w8gfr95u68kujzlq7zht5hyf452u8yshr120.k
          description: VPN Server cjdns public key
          required: true
      requestBody:
        description: Request connection authorization from a VPN
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: integer
                  format: timestamp
                  example: 1592233855
                  description: Unix timestamp
        required: true
      responses:
        '200':
          description: Ok. The client is already authorized to connect to the VPN
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/VpnServerStatusResponse'
        '201':
          description: Ok. The client has been authorized to connect to the VPN
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/VpnServerStatusResponse'
        '400':
          description: Bad Request. Some information provided was invalid
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/VpnServerStatusResponse'
        '401':
          description: Unauthorized. The connection or authorization was rejected
        '404':
          description: Not Found. This VPN server is not registered
        '408':
          description: Timout. The VPN server didn't respond.
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/VpnAuthorizationResponseTimeout'

        '500':
          description: Server Error. Response for all other errors.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpnServerStatusResponse'
        '503':
          description: Service Unavailable. No more IP addresses for allocation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VpnServerStatusResponse'
      security:
        - ApiKey: 
            - 'write:vpnConnect'
  /vpn/accounts/:
    post:
      tags:
        - Account Management
      summary: Check  a new client account
      description: When a new email address is submitted, the email address is registered with the system and a unique token is generated for that email. This token must be kept secret and is used for operations related to account management.
      operationId: registerNewClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRegistrationInputs'
      responses:
        '201':
          description: Created. New account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountCreated'
        '400':
          description: Invalid Request. The input email is invalid or the email is already confirmed.
  /vpn/accounts/username/:
    get:
      tags:
        - Account Management
      summary: Generate a random username
      description: The system requires a username to identify users, but doesn't require the user to decide what their username is. As a curtesy, a random unallocated username can be given to the user.
      operationId: generateUsername
      responses:
        '200':
          description: Created. New account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Username'
        '400':
          description: Invalid Request. A username could not be generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouldNotGenerateUsernameError'
  /vpn/accounts/{username}/publickey/:
    get:
      tags:
        - Account Management
      summary: Get an account's publickey
      description: Get the cjdns public key for the account
      operationId: getAccountPublickey
      parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/AccountUsername'
          required: true
      responses:
        '200':
          description: OK. Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanonicalPublicKeyOutput'
        '404':
          description: Not Found. No account matching this username could be found
  /vpn/accounts/{username}/initialemail/:
    post:
      tags:
        - Account Management
      summary: Attach an email to a newly-created account
      description: When a new account is created, it doesn't yet have an email address. This method attaches an email address to the user. This method can only be performed once per account.
      operationId: attachInitialEmail
      parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/AccountUsername'
          required: true
      responses:
        '200':
          description: OK. Email address added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialEmailAttachedConfirmation'
        '400':
          description: Invalid Request. The email address is already registered or the account already has an email address. A JSON body will explain the error.
        '401':
          description: Unauthorized. The header signature could not be verified
        '404':
          description: Not Found. No account matching this username could be found
  /vpn/accounts/{username}/initialpassword/:
    post:
      tags:
        - Account Management
      summary: Attach a password to a newly-created account
      description: When a new account is created, it doesn't yet have a password. This method attaches a new password to the user. This method can only be performed once per account.
      operationId: attachInitialPassword
      parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/AccountUsername'
          required: true
      responses:
        '200':
          description: OK. Password was added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialPasswordSuccessStatusResponse'
        '400':
          description: Invalid Request. The account already has a password. A JSON body will explain the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialPasswordFailedStatusResponse'
        '401':
          description: Unauthorized. The header signature could not be verified
        '404':
          description: Not Found. No account matching this username could be found
  /vpn/accounts/authorize/:
    post:
      tags:
        - Account Management
      summary: Verify Login
      description: Verify login information for an account with the password and email or username.
      operationId: verifyLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountLoginInputs'
      responses:
        '200':
          description: Account authorized
        '401':
          description: Unauthorized. These credentials could not be authorized.
  /vpn/accounts/{username}/confirmstatus/:
    get:
      tags:
        - Account Management
      summary: Register a new client account
      description: When a user creates a new account, they receive an email with a confirmation link. When the user clicks the confirmation link in their email, the status reported at this endpoint changes.
      operationId: checkAccountRegistrationStatus
      parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/AccountUsername'
          required: true
      responses:
        '202':
          description: Accepted. Account confirmation is still pending
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfirmationStatusResponsePending'
        '200':
          description: Ok. The account has been verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountConfirmationStatusResponseSuccess'
        '400':
          description: Invalid Request. Some information provided was not valid
        '404':
          description: Not Found. The account does not exist
  /vpn/accounts/{passwordResetToken}/password/:
    post:
      tags:
        - Account Management
      summary: Request to change the password of an existing client account. 
      description: The server will send an email containing a confirmation link if the email address is registered on the system. The API will respond with an endpoint URL which responds with information regarding the state of the confirmation.
      operationId: changePassword
      parameters:
        - in: path
          name: passwordResetToken
          schema:
            $ref: '#/components/schemas/PasswordResetToken'
          required: true
      responses:
        '202':
          description: Accepted. The password reset process has been initialized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetAcceptedResponse'
        '401':
          description: The provided email address and/or secret token was invalid
    get:
      tags:
        - Account Management
      summary: Request to change the password of an existing client account
      description: After a user has issued a password reset request, this endpoint responds with status information about whether or not a confirmation code has been applied by the user.
      operationId: checkChangePasswordRequestStatus
      parameters:
        - in: path
          name: passwordResetToken
          schema:
            $ref: '#/components/schemas/PasswordResetToken'
          required: true
      responses:
        '202':
          description: Password reset confirmation still pending
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetStatusResponsePending'
        '200':
          description: Ok. The password reset request has been verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetStatusResponseComplete'
        '400':
          description: Invalid Request. Some information provided was not valid
        '404':
          description: Not Found. The password reset request has timed out, does not exist, or  has been  completed
  /vpn/client/version/{clientOs}/:
    get:
      tags:
        - Clients
      summary: Client gets information about most recent version for a client
      operationId: getLatestClientVersion
      parameters:
        - in: path
          name: clientOs
          schema:
            type: string
            example: android
            enum:
              - android
              - ios
              - macos
              - windows
              - linux
          description: >
            Client OS:
              * `android` - Android smartphones and tablets
              * `ios` - iPhone, iPad, and iWatch
              * `macos` - Apple laptops and desktops
              * `windows` - Windows-based computers
              * `linux` - Linux-based computers
          required: true
      responses:
        '200':
          description: OK. Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientSoftwareVersion'
        '405':
          description: Invalid input
        '404':
          description: Not found. Client OS not found or not supported 
      security:
        - ApiKey:
          - 'read:version'
    post:
      tags:
        - Clients
      summary: Admin sets the latest client version and download URL
      operationId: setLatestClientVersion
      parameters:
        - in: path
          name: clientOs
          schema:
            type: string
            example: Android
            enum:
              - android
              - ios
              - macos
              - windows
              - linux
          description: >
            Client OS:
              * `android` - Android smartphones and tablets
              * `ios` - iPhone, iPad, and iWatch
              * `macos` - Apple laptops and desktops
              * `windows` - Windows-based computers
              * `linux` - Linux-based computers
          required: true
      requestBody:
        description: Client Software version and download URL
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSoftwareVersionRequestBody'
        required: true
      responses:
        '201':
          description: Created. A new version has been saved
        '405':
          description: Invalid input
        '403':
          description: Forbidden. Access to create a new version is not authorized
      security:
        - ApiKey:
          - 'write:version'
  /vpn/client/event/:
    post:
      tags:
        - Events
      summary: Client adds a loggable event such as a crash report
      operationId: addLogItem
      requestBody:
        description: Client logs an event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: OK. Event logged
        '405':
          description: Invalid input
        '403':
          description: Unauthorized
      security:
        - ApiKey:
          - 'write:event'
      
components:
  schemas:
    Event:
      type: object
      properties:
        publicKey:
          type: string
          description: Client's cjdns public key
          example: lbqr0rzyc2tuysw3w8gfr95u68kujzlq7zht5hyf452u8yshr120.k
        error:
          type: string
          example: connection
          enum: 
            - connectionFailed
            - disconnection
            - routeStopped
            - cjdnsCrash
            - connection
            - disconnection
            - cjdroute
            - cjdnsSocket
            - vpnService
            - other
          description: >
            Error type:
             * `connectionFailed` - Could not connect
             * `disconnection` - Unexpected disconnection
             * `routeStopped` - Connected but unable to route traffic
             * `cjdnsCrash` - CJDNS crashed
             * `connection` - VPN client connected
             * `disconnection` - VPN client disconnected
             * `cjdroute` - Cdjns route problem
             * `cjdnsSocket` - Cjdns socket problem
             * `vpnService` - VPN service issue
             * `other` - Other event, use 'message' to explain
        clientSoftwareVersion:
          type: string
          description: VPN client software version
          example: android-anode-0.9.11a
        clientOs:
          type: string
          example: Android
          enum:
            - Android
            - iOS
            - MacOS
            - Windows
            - Linux
          description: >
            Client OS:
              * `Android` - Android smartphones and tablets
              * `iOS` - iPhone, iPad, and iWatch
              * `MacOS` - Apple laptops and desktops
              * `Windows` - Windows-based computers
              * `Linux` - Linux-based computers
        clientOsVersion:
          type: string
          description: Client's OS version, such as Android 9.1
          example: "9.1"
        cpuUtilizationPercent:
          type: number
          description: Percent CPU utilization (or if unavailable, the system CPU utilization number, e.g. 1.32)
          example: 34
        availableMemoryBytes:
          type: integer
          description: The amount of available system memory in bytes
          example: 340243234
        localTimestamp:
          type: string
          format: date-time
          description: Client's local date-time, as defined by  RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        ip4Address:
          type: string
          format: ipv4
          description: User's IPv4 address on the network device that's connected to the VPN
          example: "91.207.175.41"
        ip6Address:
          type: string
          format: ipv6
          description: User's IPv46 address on the network device that's connected to the VPN
          example:
            fc29:c42b:fa32:b411:71c7:cf70:98c6:9427
        message:
          type: string
          description: A human-readable explanation of the error message
          example:
            cjdns route failed unexpectedly
        previousAndroidLog:
          type: string
          description: (stack trace or other information useful for debugging)
          example: >
            1588074618 INFO RandomSeed.c:42 Attempting to seed random number generator\n1588074618 INFO RandomSeed.c:50 Trying random seed [/dev/urandom] Success\n1588074618 INFO RandomSeed.c:50 Trying random seed [/proc/sys/kernel/random/uuid (Linux)] Success\n1588074618 INFO RandomSeed.c:50 Trying random seed [getentropy(2)] Success1588074618 INFO RandomSeed.c:64 Seeding random number generator succeeded with [3] sources\n1588074618 INFO LibuvEntropyProvider.c:59 Taking clock samples every [1000]ms for random generator\n1588074618 DEBUG Core.c:471 Getting pre-configuration from client\n1588074618 DEBUG Pipe.c:268 Pipe [(null)] established connection\n1588074618 DEBUG Core.c:474 Finished getting pre-configuration from client\n1588074618 DEBUG UDPAddrIface.c:289 Binding to address [127.0.0.1:11234]\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [127.0.0.1:11234]\n1588074618 INFO cjdroute2.c:736 Cjdns i386 linux +seccomp\n1588074618 INFO cjdroute2.c:740 Checking for running instance...\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [0.0.0.0:38820]\n1588074618 DEBUG AdminClient.c:333 Connecting to [127.0.0.1:11234]\n1588074618 DEBUG Pipe.c:153 Buffering a message\n1588074618 DEBUG cjdroute2.c:815 Sent [144] bytes to core\n1588074618 DEBUG Pipe.c:268 Pipe [/data/data/co.anode.anodevpn/files/cjdroute.sock] established connection\n1588074618 DEBUG Pipe.c:290 Sending buffered message\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [0.0.0.0:59077]\n1588074618 DEBUG AdminClient.c:333 Connecting to [127.0.0.1:11234]\n1588074618 INFO Configurator.c:135 Checking authorized password 0.\n1588074618 INFO Configurator.c:159 Adding authorized password \#[0] for user [default-login].\n1588074618 INFO Configurator.c:197 Setting beacon mode UDPInterface to [2].\n1588074618 INFO Configurator.c:465 Setting up all ETHInterfaces...\n1588074618 WARN Configurator.c:111 Got error [Failed to configure tunnel [TUNInterface_linux.c:65 open(\"\\/dev\\/tun\") [Permission denied]]] calling [Core_initTunnel], ignoring.\n1588074618 DEBUG Configurator.c:638 Security_noforks()\n1588074618 DEBUG Configurator.c:663 Security_setupComplete()\n1588074618 DEBUG Configurator.c:747 Cjdns started in the background\n
        newAndroidLog:
          type: string
          description: (stack trace or other information useful for debugging)
          example: >
            1588074618 INFO RandomSeed.c:42 Attempting to seed random number generator\n1588074618 INFO RandomSeed.c:50 Trying random seed [/dev/urandom] Success\n1588074618 INFO RandomSeed.c:50 Trying random seed [/proc/sys/kernel/random/uuid (Linux)] Success\n1588074618 INFO RandomSeed.c:50 Trying random seed [getentropy(2)] Success1588074618 INFO RandomSeed.c:64 Seeding random number generator succeeded with [3] sources\n1588074618 INFO LibuvEntropyProvider.c:59 Taking clock samples every [1000]ms for random generator\n1588074618 DEBUG Core.c:471 Getting pre-configuration from client\n1588074618 DEBUG Pipe.c:268 Pipe [(null)] established connection\n1588074618 DEBUG Core.c:474 Finished getting pre-configuration from client\n1588074618 DEBUG UDPAddrIface.c:289 Binding to address [127.0.0.1:11234]\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [127.0.0.1:11234]\n1588074618 INFO cjdroute2.c:736 Cjdns i386 linux +seccomp\n1588074618 INFO cjdroute2.c:740 Checking for running instance...\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [0.0.0.0:38820]\n1588074618 DEBUG AdminClient.c:333 Connecting to [127.0.0.1:11234]\n1588074618 DEBUG Pipe.c:153 Buffering a message\n1588074618 DEBUG cjdroute2.c:815 Sent [144] bytes to core\n1588074618 DEBUG Pipe.c:268 Pipe [/data/data/co.anode.anodevpn/files/cjdroute.sock] established connection\n1588074618 DEBUG Pipe.c:290 Sending buffered message\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [0.0.0.0:59077]\n1588074618 DEBUG AdminClient.c:333 Connecting to [127.0.0.1:11234]\n1588074618 INFO Configurator.c:135 Checking authorized password 0.\n1588074618 INFO Configurator.c:159 Adding authorized password \#[0] for user [default-login].\n1588074618 INFO Configurator.c:197 Setting beacon mode UDPInterface to [2].\n1588074618 INFO Configurator.c:465 Setting up all ETHInterfaces...\n1588074618 WARN Configurator.c:111 Got error [Failed to configure tunnel [TUNInterface_linux.c:65 open(\"\\/dev\\/tun\") [Permission denied]]] calling [Core_initTunnel], ignoring.\n1588074618 DEBUG Configurator.c:638 Security_noforks()\n1588074618 DEBUG Configurator.c:663 Security_setupComplete()\n1588074618 DEBUG Configurator.c:747 Cjdns started in the background\n
        debuggingMessages:
          type: string
          description: (stack trace or other information useful for debugging)
          example: >
            1588074618 INFO RandomSeed.c:42 Attempting to seed random number generator\n1588074618 INFO RandomSeed.c:50 Trying random seed [/dev/urandom] Success\n1588074618 INFO RandomSeed.c:50 Trying random seed [/proc/sys/kernel/random/uuid (Linux)] Success\n1588074618 INFO RandomSeed.c:50 Trying random seed [getentropy(2)] Success1588074618 INFO RandomSeed.c:64 Seeding random number generator succeeded with [3] sources\n1588074618 INFO LibuvEntropyProvider.c:59 Taking clock samples every [1000]ms for random generator\n1588074618 DEBUG Core.c:471 Getting pre-configuration from client\n1588074618 DEBUG Pipe.c:268 Pipe [(null)] established connection\n1588074618 DEBUG Core.c:474 Finished getting pre-configuration from client\n1588074618 DEBUG UDPAddrIface.c:289 Binding to address [127.0.0.1:11234]\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [127.0.0.1:11234]\n1588074618 INFO cjdroute2.c:736 Cjdns i386 linux +seccomp\n1588074618 INFO cjdroute2.c:740 Checking for running instance...\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [0.0.0.0:38820]\n1588074618 DEBUG AdminClient.c:333 Connecting to [127.0.0.1:11234]\n1588074618 DEBUG Pipe.c:153 Buffering a message\n1588074618 DEBUG cjdroute2.c:815 Sent [144] bytes to core\n1588074618 DEBUG Pipe.c:268 Pipe [/data/data/co.anode.anodevpn/files/cjdroute.sock] established connection\n1588074618 DEBUG Pipe.c:290 Sending buffered message\n1588074618 DEBUG UDPAddrIface.c:328 Bound to address [0.0.0.0:59077]\n1588074618 DEBUG AdminClient.c:333 Connecting to [127.0.0.1:11234]\n1588074618 INFO Configurator.c:135 Checking authorized password 0.\n1588074618 INFO Configurator.c:159 Adding authorized password \#[0] for user [default-login].\n1588074618 INFO Configurator.c:197 Setting beacon mode UDPInterface to [2].\n1588074618 INFO Configurator.c:465 Setting up all ETHInterfaces...\n1588074618 WARN Configurator.c:111 Got error [Failed to configure tunnel [TUNInterface_linux.c:65 open(\"\\/dev\\/tun\") [Permission denied]]] calling [Core_initTunnel], ignoring.\n1588074618 DEBUG Configurator.c:638 Security_noforks()\n1588074618 DEBUG Configurator.c:663 Security_setupComplete()\n1588074618 DEBUG Configurator.c:747 Cjdns started in the background\n
      xml:
        name: Error
    ClientSoftwareVersion:
      type: object
      properties:
        majorNumber:
          type: integer
          description: Major version number
          example: 0
        minorNumber:
          type: integer
          description: Minor version number
          example: 1
        revisionNumber:
          type: string
          nullable: true
          description: Revision Number
          example: 11a
        clientSoftwareVersion:
          type: string
          description: VPN client software version
          example: android-anode-0.9.11a
        clientCpuArchitecture:
          type: string
          example: Android
          enum:
            - i686
            - aarch64
            - armv7a
            - X86_64
          description: >
            Client CPU Architecture:
              * `i686`
              * `aarch64`
              * `armv7a`
              * `X86_64`
        binaryDownloadUrl:
          type: string
          format: uri
          description: URL of the binary for download
          example: https://anode.co/downloads/android-anode-0.9.11a.apk
        certificateUrl:
          type: string
          format: uri
          description: URL of the binary for download
          example: https://anode.co/downloads/certificates/android-anode-0.9.11a.pem
        releaseDatetime:
          type: string
          nullable: true
          format: date-time
          description: date-time of official release, at server time, as defined by  RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
      xml:
        name: Client Software Version
    ClientSoftwareVersionRequestBody:
      type: object
      properties:
        clientOs:
          type: string
          description: Client OS name
          example: android
        majorNumber:
          type: integer
          description: Major version number
          example: 0
        minorNumber:
          type: integer
          description: Minor version number
          example: 1
        revisionNumber:
          type: string
          nullable: true
          description: Revision Number
          example: 11a
        clientSoftwareVersion:
          type: string
          description: VPN client software version
          example: android-anode-0.9.11a
        binaryDownloadUrl:
          type: string
          format: uri
          description: URL of the binary for download
          example: https://anode.co/downloads/android-anode-0.9.11a.apk
        certificateUrl:
          type: string
          format: uri
          description: URL of the binary for download
          example: https://anode.co/downloads/certificates/android-anode-0.9.11a.pem
      xml:
        name: Client Software Version Request Body
    VPNServer:
      type: object
      properties:
        name:
          type: string
          description: Descriptive name of the server
          example: Kenny G
        publicKey:
          type: string
          description: cjdns public key
          example: lbqr0rzyc2tuysw3w8gfr95u68kujzlq7zht5hyf452u8yshr120.k
        bandwidthBps:
          type: integer
          description: Approximate maximum bandwidth in bps
          example: 10485760
        region:
          type: string
          description: The state or province where the VPN exit node resides
          example: 'California'
        countryCode:
          type: string
          description: The 2-letter ISO3166 country code representing the country where the VPN exit node resides
          example: 'US'
        networkSettings:
          type: array
          items:
            type: object
            properties:
              usesNat:
                type: boolean
                description: true if the network uses NAT
                example: true
              perClientAllocationSize:
                type: string
                nullable: true
                description: Per client network allocation size (relevant for workplace VPNs). Defaults to '/0'
                example: "/0"
              natExitRanges:
                type: array
                items:
                  type: object
                  nullable: true
                  description: IP address range 
                  properties:
                    min:
                      type: string
                      format: string
                      anyOf:
                        - format: ipv4
                        - format: ipv6
                      description: Low end of exit IP range range
                      example: "24.232.89.32"
                    max:
                      type: string
                      format: string
                      anyOf:
                        - format: ipv4
                        - format: ipv6
                      description: High end of exit IP range range
                      example: "24.232.89.32"
              clientAllocationRanges:
                type: array
                items:
                  type: object
                  description: IP address range available for allocation
                  properties:
                    min:
                      type: string
                      anyOf:
                        - format: ipv4
                        - format: ipv6
                      description: Low end of IP range. Can be IPv4 or IPv6
                      example: "10.0.0.1"
                    max:
                      type: string
                      anyOf:
                        - format: ipv4
                        - format: ipv6
                      description: High end of IP range. Can be IPv4 or IPv6
                      example: "10.0.0.29"
          description: VPN client software version
        peeringLines:
          type: array
          items:
            $ref: '#/components/schemas/cjdnsPeeringLine'
        onlineSinceDatetime:
          type: string
          format: date-time
          description: date-time of first appearance, at server time, as defined by  RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
        lastSeenDatetime:
          type: string
          format: date-time
          description: date-time of most recent appearance, at server time, as defined by  RFC 3339, section 5.6
          example: "2017-07-21T17:32:28Z"
      xml:
        name: Client Software Version
    cjdnsPeeringLine:
      type: object
      properties:
        name:
          type: string
          description: Human-friendly name of the peering line
          example: Stretch Armstrong
        login:
          type: string
          description: username authorized on cjdns server
          example: my-cjdns-username
        password:
          type: string
          description: password authorized on cjdns server
          example: skZ6UtW5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB.k
    VPNClientConnectionRequest:
      type: object
      properties:
        publicKey:
          type: string
          description: Client cjdns public key
          example: skZ6UtW5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB.k
      xml:
        name: Client Software Version
    AccountRegistrationInputs:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/AccountUsername"
    AccountLoginInputs:
      type: object
      properties:
        emailOrUsername:
          type: string
          description: Email or username
          example: jon@example.com
        password:
          $ref: "#/components/schemas/AccountPassword"
    AccountCreated:
      type: object
      properties:
        passwordResetToken:
          $ref: "#/components/schemas/PasswordResetToken"
    InitialEmailAttachedConfirmation:
      type: object
      properties:
        accountConfirmationStatusUrl:
          type: string
          format: url
          example: '/api/0.3/vpn/accounts/username/confirmstatus/'
          description: The URL to check on the newly registered email confirmation status
    PasswordResetAcceptedResponse:
      type: object
      properties:
        passwordResetStatusUrl:
          type: string
          description: The URL to check on the status of this password reset operation. It includes the user's email address
          example: /api/0.3/vpn/accounts/<passwordResetToken>/password/
    PasswordResetStatusResponsePending:
      type: object
      properties:
        status:
          type: string
          example: 'pending'
          enum:
            - pending
          description: >
            Status:
              * `pending` - Waiting for password reset flow to complete
    PasswordResetStatusResponseComplete:
      type: object
      properties:
        status:
          type: string
          example: 'complete'
          enum:
            - complete
          description: >
            Status:
              * `complete` - Password reset flow completed
        backupWalletPassword:
          $ref: '#/components/schemas/BackupWalletPassword'
    AccountCreationResponse:
      type: object
      properties:
        accountConfirmationStatusUrl:
          type: string
          format: url,
          example: 'http://vpn.anode.co/vpn/accounts/username/confirmstatus/'
          description: The URL to check for the account confirmation status
        passwordResetToken:
          $ref: "#/components/schemas/PasswordResetToken"
    AccountConfirmationStatusResponsePending:
      type: object
      properties:
        status:
          type: string
          example: 'pending'
          enum:
            - pending
          description: >
            Status:
              * `pending` - Waiting for account
    AccountConfirmationStatusResponseSuccess:
      type: object
      properties:
        status:
          type: string
          example: 'complete'
          enum:
            - complete
          description: >
            Status:
              * `complete` - Account confirmation flow completed
        backupWalletPassword:
          $ref: '#/components/schemas/BackupWalletPassword'
    VpnAuthorizationResponseSuccess:
      type: object
      properties:
        status:
          type: string
          example: 'success'
          enum:
            - success
            - error
          description: >
            Status:
              * `success` - Client's public key was authorized and is ready to connect
              * `error` - There was a problem authorizing the client's public key
        message:
          type: string
          example: 'public key "skZ6UtW5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB.k" was authorized'
          description: An informative message about the status of the response
    VpnAuthorizationResponseTimeout:
      type: object
      properties:
        status:
          type: string
          example: 'error'
          enum:
            - success
            - error
          description: >
            Status:
              * `success` - Client's public key was authorized and is ready to connect
              * `error` - There was a problem authorizing the client's public key
        message:
          type: string
          example: 'VPN server timed out.'
          description: An informative message about the status of the response
    VpnAuthorizationResponseInvalidRequest:
      type: object
      properties:
        status:
          type: string
          example: 'error'
          enum:
            - success
            - error
          description: >
            Status:
              * `success` - Client's public key was authorized and is ready to connect
              * `error` - There was a problem authorizing the client's public key
        message:
          type: string
          example: 'InvalidResponse.'
          description: An informative message about the status of the response
    BackupWalletPassword:
      type: string
      example: s27YySDEuSVzkYJGXYnAInGQ3O1ZZ4n8KZMws4luTmDRu0xHwwn2792X3MFKY4ZC
      description: The app secret for an app to encrypt or decrypt their wallet.
    AccountEmail:
      type: string
      format: email
      description: Email address used to uniquely identify account on the system.
      example: jon@example.com
    AccountUsername:
      type: string
      description: A string less than 200 characters long that uniquely identifies the user
      example: myspecialusername
    AccountPassword:
        type: string
        format: password
        description: A password that includes numbers, letters and is at least 9 characters long
        example: Abo13m!2
    PasswordResetToken:
      type: string
      description: A token associated with the user's account that can be used to initiate a password recovery process.
      example: skZ6UtW5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB.k
    PublicKeyInput:
      type: object
      properties:
        publicKey:
          type: string
          example: '------BEGIN-PUBLIC-KEY----\nnaetuhasntuhasnteh\n------END-PUBLIC-KEY-----'
          description: A public key
        algorithm:
          type: string
          example: 'rsa-sha256'
          description: an encryption algorithm
    PublicKeyOutput:
      type: object
      properties:
        publicKeyId:
          type: string
          example: 'rsa-sha256-nnaetuhasnt-1'
          description: A unique identifier for a public key.
    InitialPasswordSuccessStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: success
          description: Operation status
        message:
          type: string
          example: The password has been set
          description: The message describing the statusof the operation
    InitialPasswordFailedStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: failed
          description: Operation status
        message:
          type: string
          example: There is already a password associated with an account
          description: The message describing the statusof the operation
    CanonicalPublicKeyOutput:
      type: object
      properties:
        publicKey:
          type: string
          example: 'skZ6UtW5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB.k'
          description: A cjdns public key
    Username:
      type: object
      properties:
        username:
          type: string
          example: 'ok-squirrel'
          description: a username
    CouldNotGenerateUsernameError:
      type: object
      properties:
        status:
          type: string
          example: 'error'
          enum:
            - error
          description: >
            Status:
              * `error` - There was a problem generating a username
        message:
          type: string
          example: 'A username could not be generated.'
          description: An informative message about the status of the response
    VpnServerStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
          enum:
            - success
            - error
          description: >
            Status:
              * `success` - Method completed successfully
              * `error` - Error processing request
        message:
          type: string
          example: 'not found'
          description: Human readable text describing the nature of the status
        expiresAt:
          type: string
          format:  integer
          example: '1591963516'
          description: Unix timestamp representing the date and time the authorization and allocated IP addresses expires
  securitySchemes:
    ApiKey:
      description: This system uses cryptographically signed messages using the draft-cavage-http-signatures-10 draft standard for authorization.
      type: apiKey
      name: Authorization
      in: header

